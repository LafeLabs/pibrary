
## [HOME](scrolls/home)

# The Pyramids
 
## notes on the name

Golden Pyramids? Pink Pyramids? or just The Pyramids?  

Symmetron, Golden Section, divine proportion, divine section, capstone, divine pyramid


## scrolls

 - what is trash magic?
 - what is geometron? 
 - Symmetry and scale: 3 fold 4 fold, 5 fold, 2 and phi
 - self-replicating geometry from trash, geometron
 - construct the pyramids
 - take apart a printer and harvest the motors
 - soldering
 - arduino 101
 - electronics build
 - solar power 101
 - action geometry: artbox, s hook, skeletron
 - the mathematics of the gyrator sensor
 - physics of vibrators
 - learning python in jupyter, going through all math and then taking sensor data from actual machine in action and analyzing it
 - neopixels
 - build the trash robot and use it
 - raspberry pi 101 for geometron
 - geometron for laser cutting

## What are the Pyramids?

 - open source hardware
 - based on arduino, teach the basics of arduino 
 - a whole curriculum of hands on STEAM education: geometry, building things from trash, arduino, math, coding, electronics, raspberry pi,
 - self replicating hardware: you learn to teach others to copy, anyone can copy on their own
 - built from trash and geometry, demonstrate the principles of 
 - geometric body extension, outside not just gender binary but biological body shape
 - upcycle electronics, reclaim broken printers, connect to Trash Robot network
 - part of the geometron network, and a demonstration of trash magic as a production/replication system to replace the consumer capitalist system
 - educational events, seminars to do all the builds
 - sacred geometry, a way to connect with the fundamental symmetries of the universe
 - ritual activities combining sex, technology, crafts, and geometry

## bill of materials

 - cardboard trash
 - plastic milk bottle trash
 - big steel nuts 
 - big DC brushed motor from old broken computer printer
 - [black duct tape](https://www.amazon.com/Duct-Black-3920-BK-Inches-Yards/dp/B0013AX6FC/)
 - [pink duct tape](https://www.amazon.com/Scotch-Duct-1-88-Inch-20-Yard-6-Pack/dp/B00ETVVKUK/)
 - geometry tools: golden triangle, ruler, square, triangle, box cutter, sharpies
 - clothesline
 - [$9 12 volt wall power supply with barrel connectors](https://www.amazon.com/COOLM-Transformer-100V-240V-Switching-Wireless/dp/B07H4DCHQ2/)
 - [$10 barrel power connectors 10 pack](https://www.amazon.com/43x2pcs-Connectors-Security-Lighting-MILAPEAK/dp/B072BXB2Y8/)
 - [power cable spool(or use trash)](https://www.amazon.com/American-Gauge-Copper-Wire/dp/B0791B4ZRW/)
 - [toggle switch](https://www.amazon.com/dp/B08P64QZQK)
 - [Arduino UNO](https://www.amazon.com/ELEGOO-Board-ATmega328P-ATMEGA16U2-Compliant/dp/B01EWOE0UU/)
 - [LIS3DH accleration sensor](https://www.adafruit.com/product/2809)
 - [Motor controller board](https://www.adafruit.com/product/2448)
 - [8" male/female pin/socket jumper wires](https://www.amazon.com/dp/B077N5RLHN)
 - [breadboard jumper kit](https://www.amazon.com/AUSTOR-Lengths-Assorted-Preformed-Breadboard/dp/B07CJYSL2T)
 - [solderless breadboard](https://www.amazon.com/dp/B082VYXDF1)
 - [random male headers](https://www.amazon.com/Breakaway-Header-Straight-Connector-Prototype/dp/B07BXDYTBP/)
 - soldering iron, solder


## Shapes

 - Golden Triangle with 3 inch base
 - Trapezoid with 6 inch base, 3 inch top, 72 degrees in bottom angles and 108 degrees in top(this is three of the first triangle)
 - 3 inch square with lines down the middle both ways
 - 6 inch square(four of the 3 inch)
 - 1.5 inch square(a quarter of the 3 inch)
 - trapezoid with 3 inch bottom, 1.5 inch top, 60 degrees and 120 degrees from 3 inch triangle

## Constructions

 - vibrating pyramid with plastic arch top
 - control pyramid base
 - control pyramid capstone
 - weight assembly on motor
 - artbox to carry supplies and parts in 


[![](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/pyramidsimages/uploadimages/pyramids_shapes.svg)](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/pyramidsimages/uploadimages/pyramids_shapes.svg)

![](https://i.imgur.com/7ijv54o.jpg)

## Code

 - [pyramids-buttons.ino](https://github.com/LafeLabs/pibrary/blob/main/factory/pyramidscode/code/pyramids-buttons.ino)
 - [pyramids.ino](https://github.com/LafeLabs/pibrary/blob/main/factory/pyramidscode/code/pyramids.ino)
 - [gyratorxy.ino](https://github.com/LafeLabs/pibrary/blob/main/factory/pyramidscode/code/gyratorxy.ino)
 - [gyratorz.ino](https://github.com/LafeLabs/pibrary/blob/main/factory/pyramidscode/code/gyratorz.ino)
 - [speedcontrol.ino](https://github.com/LafeLabs/pibrary/blob/main/factory/pyramidscode/code/speedcontrol.ino)
 - [chaos.ino](https://github.com/LafeLabs/pibrary/blob/main/factory/pyramidscode/code/chaos.ino)
 - [code set global url](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/pyramidscode/data/codeset.txt)


#### Pyramids main code with switch to select mode


```



// The pyramids combined code with a switch 
// which selects between xy gyrator, z gyrator and simple speed control


#include <Wire.h>
#include <SPI.h>
#include <Adafruit_LIS3DH.h>
#include <Adafruit_Sensor.h>

// Used for software SPI
#define LIS3DH_CLK 13
#define LIS3DH_MISO 12
#define LIS3DH_MOSI 11
// Used for hardware & software SPI
#define LIS3DH_CS 10

// software SPI
//Adafruit_LIS3DH lis = Adafruit_LIS3DH(LIS3DH_CS, LIS3DH_MOSI, LIS3DH_MISO, LIS3DH_CLK);
// hardware SPI
//Adafruit_LIS3DH lis = Adafruit_LIS3DH(LIS3DH_CS);
// I2C
Adafruit_LIS3DH lis = Adafruit_LIS3DH();


//P = Cos[omega*t]
float P[] = {1.00,0.92,0.71,0.38,0.00,-0.38,-0.71,-0.92,-1.00,-0.92,-0.71,-0.38,0.00,0.38,0.71,0.92};
//Q = Sin[omega*t]*Exp[t/tau]
float Q[] = {0.00,0.38,0.71,0.92,1.00,0.92,0.71,0.38,0.00,-0.38,-0.71,-0.92,-1.00,-0.92,-0.71,-0.38};
      
float p=0.0;  //integrated sin power
float q=0.0;  //integrated cos power
//x = input variable array
float x[] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
float xmean = 0.0;
//y = input variable array
float y[] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
float ymean = 0.0;

int m=0;
float F = 0.0;
float vold = 0.0;
float vnew = 0.0;
int deltat = 30;  //3 Hz/8
float v=0.0;
float vmax = 255.0;
float vmin = 20.0;

//float gamma = 7.0;
//float k = 20.0;
float k = 140.0;

float z = 0.0; 
float n = 0.0;
int tau = 500;
int i = 0;

int motorpin = 5;

int motorspeed = 0;

int button1pin = 3;
int button2pin = 2;

boolean button1 = false;
boolean button2 = false;


void setup(void) {
  n = tau/deltat;
  pinMode(motorpin,OUTPUT);
  analogWrite(motorpin,0);

  Serial.begin(9600);
  while (!Serial) delay(10);     // will pause Zero, Leonardo, etc until serial console opens

  Serial.println("LIS3DH test!");
  
  if (! lis.begin(0x18)) {   // change this to 0x19 for alternative i2c address
    Serial.println("Couldnt start");
    while (1) yield();
  }
  Serial.println("LIS3DH found!");
  
  lis.setRange(LIS3DH_RANGE_4_G);   // 2, 4, 8 or 16 G!
  
  Serial.print("Range = "); Serial.print(2 << lis.getRange());  
  Serial.println("G");
  pinMode(button1pin,INPUT_PULLUP); 
  pinMode(button2pin,INPUT_PULLUP); 

}

void loop() {
  
  button1 = !digitalRead(button1pin);  
  button2 = !digitalRead(button2pin);  

  lis.read();      // get X Y and Z data at once

  /* Or....get a new sensor event, normalized */ 
  sensors_event_t event; 
  lis.getEvent(&event);
  
  /* Display the results (acceleration is measured in m/s^2) */


  if(!button1 && !button2){
    z = event.acceleration.z;
    motorspeed = (z - 1.0)*255.0/8.0;
    if(z > 9.0){
      motorspeed = 255;
    }
    if(z < 1.0){
      motorspeed = 0;
    }
    
    analogWrite(motorpin,motorspeed);
    Serial.println(motorspeed);
    delay(deltat);
  }
  if(button1){
    for (m = 15; m > 0; m--){
     x[m] = x[m-1]; 
     y[m] = y[m-1];
    }
  
    i++;
    if(i>15){
      i = 0;
    }

      x[0] = event.acceleration.x;
      y[0] = event.acceleration.y;
    
      p=0.0;
      q=0.0;
      for (m = 0; m < 16;m++){
         p = p + P[m]*x[m];
         q = q + Q[m]*x[m];
      }
      F = k*sqrt(p*p + q*q)/16;
    
    //add the second axis, repeating all math to get a force, then adding it to the main force, and dividing by 2 to normalize
      p=0.0;
      q=0.0;
      for (m = 0; m < 16;m++){
         p = p + P[m]*y[m];
         q = q + Q[m]*y[m];
      }
      F += k*sqrt(p*p + q*q)/16;
    
      F /= 2;
    
      vnew = vold + ((F - vold)/n);  
      vold = vnew;
    
      motorspeed = vnew;  
      if (vnew > vmax)
      {
        motorspeed = vmax;
      }  
      if (vnew < vmin){
        motorspeed = 0;
      }
    
      
      analogWrite(motorpin,motorspeed);
    
      Serial.println(motorspeed);
    
      
      delay(deltat); 

    
  }
  if(button2){

    for (m = 15; m > 0; m--){
       x[m] = x[m-1]; 
       y[m] = y[m-1];
    }
  
    i++;
    if(i>15){
      i = 0;
    }

      x[0] = event.acceleration.z;
    
      p=0.0;
      q=0.0;
      for (int m = 0; m < 16;m++){
         p = p + P[m]*x[m];
         q = q + Q[m]*x[m];
      }
      F = k*sqrt(p*p + q*q)/16;
      
      vnew = vold + ((F - vold)/n);  
      vold = vnew;
    
      motorspeed = vnew;  
      if (vnew > vmax)
      {
        motorspeed = vmax;
      }  
      if (vnew < vmin){
        motorspeed = 0;
      }
    
      analogWrite(motorpin,motorspeed);  
      Serial.println(motorspeed);
      delay(deltat);
  }

 
}

```

#### gyratorxy

```

// XY gyrator

#include <Wire.h>
#include <SPI.h>
#include <Adafruit_LIS3DH.h>
#include <Adafruit_Sensor.h>

// Used for software SPI
#define LIS3DH_CLK 13
#define LIS3DH_MISO 12
#define LIS3DH_MOSI 11
// Used for hardware & software SPI
#define LIS3DH_CS 10

// software SPI
//Adafruit_LIS3DH lis = Adafruit_LIS3DH(LIS3DH_CS, LIS3DH_MOSI, LIS3DH_MISO, LIS3DH_CLK);
// hardware SPI
//Adafruit_LIS3DH lis = Adafruit_LIS3DH(LIS3DH_CS);
// I2C
Adafruit_LIS3DH lis = Adafruit_LIS3DH();


//P = Cos[omega*t]
float P[] = {1.00,0.92,0.71,0.38,0.00,-0.38,-0.71,-0.92,-1.00,-0.92,-0.71,-0.38,0.00,0.38,0.71,0.92};
//Q = Sin[omega*t]*Exp[t/tau]
float Q[] = {0.00,0.38,0.71,0.92,1.00,0.92,0.71,0.38,0.00,-0.38,-0.71,-0.92,-1.00,-0.92,-0.71,-0.38};
      
float p=0.0;  //integrated sin power
float q=0.0;  //integrated cos power
//x = input variable array
float x[] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
float xmean = 0.0;
//y = input variable array
float y[] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
float ymean = 0.0;

int m=0;
float F = 0.0;
float vold = 0.0;
float vnew = 0.0;
int deltat = 30;  //3 Hz/8
float v=0.0;
float vmax = 255.0;
float vmin = 20.0;

//float gamma = 7.0;
//float k = 20.0;
float k = 140.0;

float n = 0.0;
int tau = 500;
int i = 0;

int motorpin = 5;

int motorspeed = 0;

void setup(void) {
  n = tau/deltat;
  pinMode(motorpin,OUTPUT);
  analogWrite(motorpin,0);

  Serial.begin(9600);
  while (!Serial) delay(10);     // will pause Zero, Leonardo, etc until serial console opens

  Serial.println("LIS3DH test!");
  
  if (! lis.begin(0x18)) {   // change this to 0x19 for alternative i2c address
    Serial.println("Couldnt start");
    while (1) yield();
  }
  Serial.println("LIS3DH found!");
  
  lis.setRange(LIS3DH_RANGE_4_G);   // 2, 4, 8 or 16 G!
  
  Serial.print("Range = "); Serial.print(2 << lis.getRange());  
  Serial.println("G");
}

void loop() {

  for (m = 15; m > 0; m--){
   x[m] = x[m-1]; 
   y[m] = y[m-1];
  }

  i++;
  if(i>15){
    i = 0;
  }

  
  lis.read();      // get X Y and Z data at once

  /* Or....get a new sensor event, normalized */ 
  sensors_event_t event; 
  lis.getEvent(&event);
  
  /* Display the results (acceleration is measured in m/s^2) */

  x[0] = event.acceleration.x;
  y[0] = event.acceleration.y;

  p=0.0;
  q=0.0;
  for (m = 0; m < 16;m++){
     p = p + P[m]*x[m];
     q = q + Q[m]*x[m];
  }
  F = k*sqrt(p*p + q*q)/16;

//add the second axis, repeating all math to get a force, then adding it to the main force, and dividing by 2 to normalize
  p=0.0;
  q=0.0;
  for (m = 0; m < 16;m++){
     p = p + P[m]*y[m];
     q = q + Q[m]*y[m];
  }
  F += k*sqrt(p*p + q*q)/16;

  F /= 2;

  vnew = vold + ((F - vold)/n);  
  vold = vnew;

  motorspeed = vnew;  
  if (vnew > vmax)
  {
    motorspeed = vmax;
  }  
  if (vnew < vmin){
    motorspeed = 0;
  }

  
  analogWrite(motorpin,motorspeed);

  Serial.println(motorspeed);

  
  delay(deltat); 

}

```

#### Gyrator Z

```

// z gyrator

#include <Wire.h>
#include <SPI.h>
#include <Adafruit_LIS3DH.h>
#include <Adafruit_Sensor.h>

// Used for software SPI
#define LIS3DH_CLK 13
#define LIS3DH_MISO 12
#define LIS3DH_MOSI 11
// Used for hardware & software SPI
#define LIS3DH_CS 10

// software SPI
//Adafruit_LIS3DH lis = Adafruit_LIS3DH(LIS3DH_CS, LIS3DH_MOSI, LIS3DH_MISO, LIS3DH_CLK);
// hardware SPI
//Adafruit_LIS3DH lis = Adafruit_LIS3DH(LIS3DH_CS);
// I2C
Adafruit_LIS3DH lis = Adafruit_LIS3DH();

//P = Cos[omega*t]
float P[] = {1.00,0.92,0.71,0.38,0.00,-0.38,-0.71,-0.92,-1.00,-0.92,-0.71,-0.38,0.00,0.38,0.71,0.92};
//Q = Sin[omega*t]
float Q[] = {0.00,0.38,0.71,0.92,1.00,0.92,0.71,0.38,0.00,-0.38,-0.71,-0.92,-1.00,-0.92,-0.71,-0.38};
      
float p=0.0;  //integrated sine power
float q=0.0;  //integrated cosine power
//x = input variable array
float x[] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
//y = input variable array
float y[] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};

float F = 0.0;
float vold = 0.0;
float vnew = 0.0;
int deltat = 30;  //time between data points in ms
float v=0.0;
float vmax = 255.0;
float vmin = 20.0;

float k = 70.0;//converts from units of x to units of v, has units of inverse seconds

float n = 0.0;//number of sample times for a decay, tau/deltat
int tau = 500;//decay time in ms

int motorpin = 5;
int motorspeed = 0;

void setup(void) {
  n = tau/deltat;
  pinMode(motorpin,OUTPUT);
  analogWrite(motorpin,0);

  Serial.begin(9600);
  while (!Serial) delay(10);     // will pause Zero, Leonardo, etc until serial console opens

  Serial.println("LIS3DH test!");
  
  if (! lis.begin(0x18)) {   // change this to 0x19 for alternative i2c address
    Serial.println("Couldnt start");
    while (1) yield();
  }
  Serial.println("LIS3DH found!");
  
  lis.setRange(LIS3DH_RANGE_4_G);   // 2, 4, 8 or 16 G!
  
  Serial.print("Range = "); Serial.print(2 << lis.getRange());  
  Serial.println("G");
}

void loop() {

  for (int m = 15; m > 0; m--){
   x[m] = x[m-1]; 
   y[m] = y[m-1];
  }

  lis.read();      // get X Y and Z data at once

  /* Or....get a new sensor event, normalized */ 
  sensors_event_t event; 
  lis.getEvent(&event);
  
  x[0] = event.acceleration.z;

  p=0.0;
  q=0.0;
  for (int m = 0; m < 16;m++){
     p = p + P[m]*x[m];
     q = q + Q[m]*x[m];
  }
  F = k*sqrt(p*p + q*q)/16;
  
  vnew = vold + ((F - vold)/n);  
  vold = vnew;

  motorspeed = vnew;  
  if (vnew > vmax)
  {
    motorspeed = vmax;
  }  
  if (vnew < vmin){
    motorspeed = 0;
  }

  analogWrite(motorpin,motorspeed);  
  Serial.println(motorspeed);
  delay(deltat); 

}
```

#### Speed Control

```

// Basic demo for accelerometer readings from Adafruit LIS3DH

#include <Wire.h>
#include <SPI.h>
#include <Adafruit_LIS3DH.h>
#include <Adafruit_Sensor.h>

// Used for software SPI
#define LIS3DH_CLK 13
#define LIS3DH_MISO 12
#define LIS3DH_MOSI 11
// Used for hardware & software SPI
#define LIS3DH_CS 10

// software SPI
//Adafruit_LIS3DH lis = Adafruit_LIS3DH(LIS3DH_CS, LIS3DH_MOSI, LIS3DH_MISO, LIS3DH_CLK);
// hardware SPI
//Adafruit_LIS3DH lis = Adafruit_LIS3DH(LIS3DH_CS);
// I2C
Adafruit_LIS3DH lis = Adafruit_LIS3DH();



int motorpin = 5;
int motorspeed = 0;
float z = 0.0;
int deltat = 10;

void setup(void) {
  pinMode(motorpin,OUTPUT);
  analogWrite(motorpin,0);

  Serial.begin(9600);
  while (!Serial) delay(10);     // will pause Zero, Leonardo, etc until serial console opens

  Serial.println("LIS3DH test!");
  
  if (! lis.begin(0x18)) {   // change this to 0x19 for alternative i2c address
    Serial.println("Couldnt start");
    while (1) yield();
  }
  Serial.println("LIS3DH found!");
  
  lis.setRange(LIS3DH_RANGE_4_G);   // 2, 4, 8 or 16 G!
  
  Serial.print("Range = "); Serial.print(2 << lis.getRange());  
  Serial.println("G");
}

void loop() {
  
  lis.read();      // get X Y and Z data at once

  /* Or....get a new sensor event, normalized */ 
  sensors_event_t event; 
  lis.getEvent(&event);
  
  /* Display the results (acceleration is measured in m/s^2) */

  z = event.acceleration.z;


  motorspeed = (z - 1.0)*255.0/8.0;
  if(z > 9.0){
    motorspeed = 255;
  }
  if(z < 1.0){
    motorspeed = 0;
  }
  
  
  analogWrite(motorpin,motorspeed);

  Serial.println(motorspeed);

  
  delay(deltat); 

}
```
#### Chaos

```

int delay_time = 30;//ms

int x = 10;
int index = 0;


//Chaos demo
//calculate chaotic driven damped pendulum trajectory using fourth order Runge-Kutta
// 
 
  float t = 0.0;
  int period = 15;
  float y[] = {0.0,0.0};
  float E;
  float f0 = 0.0;  //velocity
  float f1 = 0.0;  //accelleration
  float f[] = {0.0,0.0};
  float k1[] = {0.0,0.0};
  float k2[] = {0.0,0.0};
  float k3[] = {0.0,0.0};
  float k4[] = {0.0,0.0};
  
  float theta = 0.0;
  float thetadot = 0.0;
  float force;
      
  float pi = 3.14159;

  float yindex = 0.1;
  float ynext[] = {0.0,0.0};
 
  float gamma = 0.4; 
  float omega0 = 0.65;
  float h = 0.02; //time step in fractions of natural period 
  float A = 1.3;  

 
  int motorpin = 5;
  int motorspeed = 0;


 
void setup() {
   Serial.begin(9600);
}


void loop() {

  force = 0;
  
  k1[0] = getf0(t,y,gamma,omega0,A,force);
  k1[1] = getf1(t,y,gamma,omega0,A,force);

  ynext[0] = y[0] + 0.5*h*k1[0];
  ynext[1] = y[1] + 0.5*h*k1[1];
  
  k2[0] = getf0(t+0.5*h,ynext,gamma,omega0,A,force);
  k2[1] = getf1(t+0.5*h,ynext,gamma,omega0,A,force);

  ynext[0] = y[0] + 0.5*h*k2[0];
  ynext[1] = y[1] + 0.5*h*k2[1];
  
  k3[0] = getf0(t+0.5*h,ynext,gamma,omega0,A,force);
  k3[1] = getf1(t+0.5*h,ynext,gamma,omega0,A,force);

  ynext[0] = y[0] + h*k3[0];
  ynext[1] = y[1] + h*k3[1];

  k4[0] = getf0(t+h,ynext,gamma,omega0,A,force);
  k4[1] = getf1(t+h,ynext,gamma,omega0,A,force);
  
  
  ynext[0] = y[0] + 0.1667*h*(k1[0] + 2*k2[0] + 2*k3[0] + k4[0]);
  ynext[1] = y[1] + 0.1667*h*(k1[1] + 2*k2[1] + 2*k3[1] + k4[1]);  


  theta = 255.0*abs(y[0])/pi;
  thetadot = 255.0*abs(y[1])/pi;

  //wrap the angle around if it goes above or below pi
  if(ynext[0] >= pi){
     ynext[0] = ynext[0] - 2*pi;
  }
  if(ynext[0] <= -pi){
     ynext[0] = ynext[0] + 2*pi;
  }

  y[0] = ynext[0];
  y[1] = ynext[1];

  t = t + h;
         
  x = int(theta);
  Serial.println(thetadot);
  motorspeed = theta;
  analogWrite(motorpin,motorspeed);

  
}


float getf0(float t,float y[],float gamma, float omega0, float A,float force){
  float result;
  result = y[1];
  return result;
}
float getf1(float t,float y[],float gamma, float omega0,float A, float force){
  float result;
  result = -sin(y[0]) - gamma*y[1] + A*cos(omega0*t) + force;
  return result;
}

```