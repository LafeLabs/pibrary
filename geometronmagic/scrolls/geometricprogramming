
## [HOME](scrolls/home)

# Geometric Programming

All technology is based on geometry.  When a screen displays text or graphics, that is a geometric construction. When we build an integrated circuit which is the basis of computers, that is just a complex pattern of shapes on a flat surface, yet another geometric construction, as  are the circuit boards on which they sit. Architecture is all geometric construction.  The path of a cutting tool or a 3d printer nozzle through space are geometric constructions.  The path of a tractor or harvester going across a field in a sequence of rows is a geometric construction.  

Any manufacturing process can be understood as a geometric construction.  To build the full Trash Magic we aim for in this work we must create manufacturing processes which replicate from place to place freely over communication networks.  If all manufacturing is a geometric process, the most fundamental way to transmit manufacturing processes is to build a language on geometry.  This represents a shift in thinking from the dominant machine ideology of today, that of the computer.  In the current dominant ideology, the most fundamental things are numbers and arithmetic operations.  People think of computers as being engines which use numbers to decide what to do to other numbers.  All of the various automation and media functions are considered to be "applications" of this arithmetic engine model. 

In Geometron we re-imagine the fundamental idea of machines as always being for doing geometry, and controlled by geometry.  This is a philosophical shift, one of values.  We choose to value the symbols displayed on a screen and the path taken by a tool for manufacturing as more fundamental than ones and zeros in the arithmetic model.  

In computer theory, people have an abstract model they use to describe all computers based on long tapes of ones and zeros which control the movement of the tapes and the operation of doing things with numbers.  Computers are then judged in terms of how effectively they process numbers, in a very numerical way, where more and bigger numbers faster is a measure of power.  This has led to architectures which use an absurd amount of computing power, with machines that do arithmetic operations a billion times a second all to carry out some task a thousand times a second, or even every few minutes.  By considering the geometric actions to be more fundamental we aim to move to much simpler machine architectures which will allow us to build machines with less intense technology than modern microelectronic fabrication methods.  

We aim to close all the loops in machine fabrication, using a geometric programming language to design and fabricate simple circuits which can run the geometric programs which make more circuits and so on.  Rather than trying immediately to build the most powerful machines, we aim to get as quickly as possible to machines which are able to run the entire process of replicating them using their own technology, without any external input.  The details of this process will be discussed in another chapter, but it is an essential part of the whole Geometron/Trash Magic process to build these loops of self-replicating physical media.  

Just as computer scientists create toy models of imaginary machines called Turing Machines(after mathematician Allan Turing of WWII cryptology fame) which act on numbers, we create a generic toy model for how to create geometric virtual machines.  This is called the Geometron Virtual Machine.  

In the Geometron Virtual Machine we imagine a tape of addresses, much like the ones and zeros in the Turing Machine.  These addresses represent positions in a pair of imaginary cubes in space, together called the Geometron Hypercube.   To make things completely geometric, we imagine the physical tape as having a sequence of symbols made up of arrays of dots, where each pattern of dots represents an address in one of the cubes.  Each address in the cube itself contains a tape made up of addresses.  So this makes thing able to endlessly refer to themselves, since the main tape can reference an address which references another address and so on, building up whole complex networks of geometric actions.  

The virtual machine can also do physical things based on each address.  This is where it is a different model than the Turing Machine.  The Turing Machine can be *used* to control physical machines but in its basic model it only works with "pure" numbers.  The Geometron Virtual machine has physical operations built into the definition of its structure.  Different areas of the address space do different kinds of operation.  The details of this structure are covered in the First Book of Geometron.  The most basic operation in our system is display of graphics on a screen.  This is because the display of symbols is how the machine interacts with the human mind, and again this points to how this differs from the Turing model.  

The Turing model ignores the human operator. It imagines an infinite tape which can in theory run programs forever, ignoring the humans who operate it and the physical mater it interacts with.  In Geometron the human has multiple roles.  It starts with a human pushing some kind of "start" button which starts the main tape being read, and we generally assume the tape is finite and that it only runs one way, once(as opposed to infinite, and running forever).  Each address on the tape has a corresponding symbol which is in a human readable format, where by "readable" we mean that it has some clear meaning to the human operator.  These symbols are themselves constructions of Geometron.   We aim for these symbols to *be* the language used for programming the machines which make all our technology.  

Our lexicon of human readable symbols includes the entirety of whatever written language a human operator is normally using, such as English.    For instance, for English we have addresses in the Hypercube for each of the printable letters on the English computer keyboard, and each of these represents a sequence of geometric actions which taken together draw that character. In the current software, this means actions taken in a web browser which control where pixels are in a graphic, a physical construction on a computer screen using the programming methods of the browser.

 


 - all technology is geometry
 - the logo turtle, how this is similar but different
 - robots of all kinds, automation in general, farm automation
 - survey of applications: microfab, circuit fab, metal fab, wood fab, 
 - the browser
 - geometry vs. arithmetic as different views of the same thing
 - geometric actions and the GVM
 - the hypercube, pure geometric programming, the mathematical definitions
 - how geometric programming can do everything without exceptions 
